/*******************************************************************************
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *  this file except in compliance with the License. A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 *  or in the "license" file accompanying this file.
 *  This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *  CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 * *****************************************************************************
 *
 *  AWS Tools for Windows (TM) PowerShell (TM)
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using Amazon.PowerShell.Common;
using Amazon.Runtime;
using System.Threading;
using Amazon.GuardDuty;
using Amazon.GuardDuty.Model;

#pragma warning disable CS0618, CS0612
namespace Amazon.PowerShell.Cmdlets.GD
{
    /// <summary>
    /// Updates the malware scan settings.
    /// 
    ///  
    /// <para>
    /// There might be regional differences because some data sources might not be available
    /// in all the Amazon Web Services Regions where GuardDuty is presently supported. For
    /// more information, see <a href="https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_regions.html">Regions
    /// and endpoints</a>.
    /// </para>
    /// </summary>
    [Cmdlet("Update", "GDMalwareScanSetting", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium)]
    [OutputType("None")]
    [AWSCmdlet("Calls the Amazon GuardDuty UpdateMalwareScanSettings API operation.", Operation = new[] {"UpdateMalwareScanSettings"}, SelectReturnType = typeof(Amazon.GuardDuty.Model.UpdateMalwareScanSettingsResponse))]
    [AWSCmdletOutput("None or Amazon.GuardDuty.Model.UpdateMalwareScanSettingsResponse",
        "This cmdlet does not generate any output." +
        "The service response (type Amazon.GuardDuty.Model.UpdateMalwareScanSettingsResponse) be returned by specifying '-Select *'."
    )]
    public partial class UpdateGDMalwareScanSettingCmdlet : AmazonGuardDutyClientCmdlet, IExecutor
    {
        
        protected override bool IsGeneratedCmdlet { get; set; } = true;
        private readonly CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();
        
        #region Parameter DetectorId
        /// <summary>
        /// <para>
        /// <para>The unique ID of the detector that specifies the GuardDuty service where you want
        /// to update scan settings.</para><para>To find the <c>detectorId</c> in the current Region, see the Settings page in the
        /// GuardDuty console, or run the <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_ListDetectors.html">ListDetectors</a>
        /// API.</para>
        /// </para>
        /// </summary>
        #if !MODULAR
        [System.Management.Automation.Parameter(Position = 0, ValueFromPipelineByPropertyName = true, ValueFromPipeline = true)]
        #else
        [System.Management.Automation.Parameter(Position = 0, ValueFromPipelineByPropertyName = true, ValueFromPipeline = true, Mandatory = true)]
        [System.Management.Automation.AllowEmptyString]
        [System.Management.Automation.AllowNull]
        #endif
        [Amazon.PowerShell.Common.AWSRequiredParameter]
        public System.String DetectorId { get; set; }
        #endregion
        
        #region Parameter EbsSnapshotPreservation
        /// <summary>
        /// <para>
        /// <para>An enum value representing possible snapshot preservation settings.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [AWSConstantClassSource("Amazon.GuardDuty.EbsSnapshotPreservation")]
        public Amazon.GuardDuty.EbsSnapshotPreservation EbsSnapshotPreservation { get; set; }
        #endregion
        
        #region Parameter ScanResourceCriteria_Exclude
        /// <summary>
        /// <para>
        /// <para>Represents condition that when matched will prevent a malware scan for a certain resource.</para><para />
        /// Starting with version 4 of the SDK this property will default to null. If no data for this property is returned
        /// from the service the property will also be null. This was changed to improve performance and allow the SDK and caller
        /// to distinguish between a property not set or a property being empty to clear out a value. To retain the previous
        /// SDK behavior set the AWSConfigs.InitializeCollections static property to true.
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.Collections.Hashtable ScanResourceCriteria_Exclude { get; set; }
        #endregion
        
        #region Parameter ScanResourceCriteria_Include
        /// <summary>
        /// <para>
        /// <para>Represents condition that when matched will allow a malware scan for a certain resource.</para><para />
        /// Starting with version 4 of the SDK this property will default to null. If no data for this property is returned
        /// from the service the property will also be null. This was changed to improve performance and allow the SDK and caller
        /// to distinguish between a property not set or a property being empty to clear out a value. To retain the previous
        /// SDK behavior set the AWSConfigs.InitializeCollections static property to true.
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.Collections.Hashtable ScanResourceCriteria_Include { get; set; }
        #endregion
        
        #region Parameter Select
        /// <summary>
        /// Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
        /// Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.GuardDuty.Model.UpdateMalwareScanSettingsResponse).
        /// Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public string Select { get; set; } = "*";
        #endregion
        
        #region Parameter Force
        /// <summary>
        /// This parameter overrides confirmation prompts to force 
        /// the cmdlet to continue its operation. This parameter should always
        /// be used with caution.
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public SwitchParameter Force { get; set; }
        #endregion
        
        protected override void StopProcessing()
        {
            base.StopProcessing();
            _cancellationTokenSource.Cancel();
        }
        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            
            var resourceIdentifiersText = FormatParameterValuesForConfirmationMsg(nameof(this.DetectorId), MyInvocation.BoundParameters);
            if (!ConfirmShouldProceed(this.Force.IsPresent, resourceIdentifiersText, "Update-GDMalwareScanSetting (UpdateMalwareScanSettings)"))
            {
                return;
            }
            
            var context = new CmdletContext();
            
            // allow for manipulation of parameters prior to loading into context
            PreExecutionContextLoad(context);
            
            if (ParameterWasBound(nameof(this.Select)))
            {
                context.Select = CreateSelectDelegate<Amazon.GuardDuty.Model.UpdateMalwareScanSettingsResponse, UpdateGDMalwareScanSettingCmdlet>(Select) ??
                    throw new System.ArgumentException("Invalid value for -Select parameter.", nameof(this.Select));
            }
            context.DetectorId = this.DetectorId;
            #if MODULAR
            if (this.DetectorId == null && ParameterWasBound(nameof(this.DetectorId)))
            {
                WriteWarning("You are passing $null as a value for parameter DetectorId which is marked as required. In case you believe this parameter was incorrectly marked as required, report this by opening an issue at https://github.com/aws/aws-tools-for-powershell/issues.");
            }
            #endif
            context.EbsSnapshotPreservation = this.EbsSnapshotPreservation;
            if (this.ScanResourceCriteria_Exclude != null)
            {
                context.ScanResourceCriteria_Exclude = new Dictionary<System.String, Amazon.GuardDuty.Model.ScanCondition>(StringComparer.Ordinal);
                foreach (var hashKey in this.ScanResourceCriteria_Exclude.Keys)
                {
                    context.ScanResourceCriteria_Exclude.Add((String)hashKey, (Amazon.GuardDuty.Model.ScanCondition)(this.ScanResourceCriteria_Exclude[hashKey]));
                }
            }
            if (this.ScanResourceCriteria_Include != null)
            {
                context.ScanResourceCriteria_Include = new Dictionary<System.String, Amazon.GuardDuty.Model.ScanCondition>(StringComparer.Ordinal);
                foreach (var hashKey in this.ScanResourceCriteria_Include.Keys)
                {
                    context.ScanResourceCriteria_Include.Add((String)hashKey, (Amazon.GuardDuty.Model.ScanCondition)(this.ScanResourceCriteria_Include[hashKey]));
                }
            }
            
            // allow further manipulation of loaded context prior to processing
            PostExecutionContextLoad(context);
            
            var output = Execute(context) as CmdletOutput;
            ProcessOutput(output);
        }
        
        #region IExecutor Members
        
        public object Execute(ExecutorContext context)
        {
            var cmdletContext = context as CmdletContext;
            // create request
            var request = new Amazon.GuardDuty.Model.UpdateMalwareScanSettingsRequest();
            
            if (cmdletContext.DetectorId != null)
            {
                request.DetectorId = cmdletContext.DetectorId;
            }
            if (cmdletContext.EbsSnapshotPreservation != null)
            {
                request.EbsSnapshotPreservation = cmdletContext.EbsSnapshotPreservation;
            }
            
             // populate ScanResourceCriteria
            var requestScanResourceCriteriaIsNull = true;
            request.ScanResourceCriteria = new Amazon.GuardDuty.Model.ScanResourceCriteria();
            Dictionary<System.String, Amazon.GuardDuty.Model.ScanCondition> requestScanResourceCriteria_scanResourceCriteria_Exclude = null;
            if (cmdletContext.ScanResourceCriteria_Exclude != null)
            {
                requestScanResourceCriteria_scanResourceCriteria_Exclude = cmdletContext.ScanResourceCriteria_Exclude;
            }
            if (requestScanResourceCriteria_scanResourceCriteria_Exclude != null)
            {
                request.ScanResourceCriteria.Exclude = requestScanResourceCriteria_scanResourceCriteria_Exclude;
                requestScanResourceCriteriaIsNull = false;
            }
            Dictionary<System.String, Amazon.GuardDuty.Model.ScanCondition> requestScanResourceCriteria_scanResourceCriteria_Include = null;
            if (cmdletContext.ScanResourceCriteria_Include != null)
            {
                requestScanResourceCriteria_scanResourceCriteria_Include = cmdletContext.ScanResourceCriteria_Include;
            }
            if (requestScanResourceCriteria_scanResourceCriteria_Include != null)
            {
                request.ScanResourceCriteria.Include = requestScanResourceCriteria_scanResourceCriteria_Include;
                requestScanResourceCriteriaIsNull = false;
            }
             // determine if request.ScanResourceCriteria should be set to null
            if (requestScanResourceCriteriaIsNull)
            {
                request.ScanResourceCriteria = null;
            }
            
            CmdletOutput output;
            
            // issue call
            var client = Client ?? CreateClient(_CurrentCredentials, _RegionEndpoint);
            try
            {
                var response = CallAWSServiceOperation(client, request);
                object pipelineOutput = null;
                pipelineOutput = cmdletContext.Select(response, this);
                output = new CmdletOutput
                {
                    PipelineOutput = pipelineOutput,
                    ServiceResponse = response
                };
            }
            catch (Exception e)
            {
                output = new CmdletOutput { ErrorResponse = e };
            }
            
            return output;
        }
        
        public ExecutorContext CreateContext()
        {
            return new CmdletContext();
        }
        
        #endregion
        
        #region AWS Service Operation Call
        
        private Amazon.GuardDuty.Model.UpdateMalwareScanSettingsResponse CallAWSServiceOperation(IAmazonGuardDuty client, Amazon.GuardDuty.Model.UpdateMalwareScanSettingsRequest request)
        {
            Utils.Common.WriteVerboseEndpointMessage(this, client.Config, "Amazon GuardDuty", "UpdateMalwareScanSettings");
            try
            {
                return client.UpdateMalwareScanSettingsAsync(request, _cancellationTokenSource.Token).GetAwaiter().GetResult();
            }
            catch (AmazonServiceException exc)
            {
                var webException = exc.InnerException as System.Net.WebException;
                if (webException != null)
                {
                    throw new Exception(Utils.Common.FormatNameResolutionFailureMessage(client.Config, webException.Message), webException);
                }
                throw;
            }
        }
        
        #endregion
        
        internal partial class CmdletContext : ExecutorContext
        {
            public System.String DetectorId { get; set; }
            public Amazon.GuardDuty.EbsSnapshotPreservation EbsSnapshotPreservation { get; set; }
            public Dictionary<System.String, Amazon.GuardDuty.Model.ScanCondition> ScanResourceCriteria_Exclude { get; set; }
            public Dictionary<System.String, Amazon.GuardDuty.Model.ScanCondition> ScanResourceCriteria_Include { get; set; }
            public System.Func<Amazon.GuardDuty.Model.UpdateMalwareScanSettingsResponse, UpdateGDMalwareScanSettingCmdlet, object> Select { get; set; } =
                (response, cmdlet) => null;
        }
        
    }
}
