/*******************************************************************************
 *  Copyright 2012-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *  this file except in compliance with the License. A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 *  or in the "license" file accompanying this file.
 *  This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *  CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 * *****************************************************************************
 *
 *  AWS Tools for Windows (TM) PowerShell (TM)
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using Amazon.PowerShell.Common;
using Amazon.Runtime;
using Amazon.Neptunedata;
using Amazon.Neptunedata.Model;

namespace Amazon.PowerShell.Cmdlets.NEPT
{
    /// <summary>
    /// Creates a new Neptune ML model training job. See <a href="https://docs.aws.amazon.com/neptune/latest/userguide/machine-learning-api-modeltraining.html">Model
    /// training using the <c>modeltraining</c> command</a>.
    /// 
    ///  
    /// <para>
    /// When invoking this operation in a Neptune cluster that has IAM authentication enabled,
    /// the IAM user or role making the request must have a policy attached that allows the
    /// <a href="https://docs.aws.amazon.com/neptune/latest/userguide/iam-dp-actions.html#startmlmodeltrainingjob">neptune-db:StartMLModelTrainingJob</a>
    /// IAM action in that cluster.
    /// </para>
    /// </summary>
    [Cmdlet("Start", "NEPTMLModelTrainingJob", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium)]
    [OutputType("Amazon.Neptunedata.Model.StartMLModelTrainingJobResponse")]
    [AWSCmdlet("Calls the Amazon NeptuneData StartMLModelTrainingJob API operation.", Operation = new[] {"StartMLModelTrainingJob"}, SelectReturnType = typeof(Amazon.Neptunedata.Model.StartMLModelTrainingJobResponse))]
    [AWSCmdletOutput("Amazon.Neptunedata.Model.StartMLModelTrainingJobResponse",
        "This cmdlet returns an Amazon.Neptunedata.Model.StartMLModelTrainingJobResponse object containing multiple properties."
    )]
    public partial class StartNEPTMLModelTrainingJobCmdlet : AmazonNeptunedataClientCmdlet, IExecutor
    {
        
        protected override bool IsGeneratedCmdlet { get; set; } = true;
        
        #region Parameter BaseProcessingInstanceType
        /// <summary>
        /// <para>
        /// <para>The type of ML instance used in preparing and managing training of ML models. This
        /// is a CPU instance chosen based on memory requirements for processing the training
        /// data and model.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String BaseProcessingInstanceType { get; set; }
        #endregion
        
        #region Parameter DataProcessingJobId
        /// <summary>
        /// <para>
        /// <para>The job ID of the completed data-processing job that has created the data that the
        /// training will work with.</para>
        /// </para>
        /// </summary>
        #if !MODULAR
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        #else
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true, Mandatory = true)]
        [System.Management.Automation.AllowEmptyString]
        [System.Management.Automation.AllowNull]
        #endif
        [Amazon.PowerShell.Common.AWSRequiredParameter]
        public System.String DataProcessingJobId { get; set; }
        #endregion
        
        #region Parameter EnableManagedSpotTraining
        /// <summary>
        /// <para>
        /// <para>Optimizes the cost of training machine-learning models by using Amazon Elastic Compute
        /// Cloud spot instances. The default is <c>False</c>.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.Boolean? EnableManagedSpotTraining { get; set; }
        #endregion
        
        #region Parameter Id
        /// <summary>
        /// <para>
        /// <para>A unique identifier for the new job. The default is An autogenerated UUID.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(Position = 0, ValueFromPipelineByPropertyName = true, ValueFromPipeline = true)]
        public System.String Id { get; set; }
        #endregion
        
        #region Parameter MaxHPONumberOfTrainingJob
        /// <summary>
        /// <para>
        /// <para>Maximum total number of training jobs to start for the hyperparameter tuning job.
        /// The default is 2. Neptune ML automatically tunes the hyperparameters of the machine
        /// learning model. To obtain a model that performs well, use at least 10 jobs (in other
        /// words, set <c>maxHPONumberOfTrainingJobs</c> to 10). In general, the more tuning runs,
        /// the better the results.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("MaxHPONumberOfTrainingJobs")]
        public System.Int32? MaxHPONumberOfTrainingJob { get; set; }
        #endregion
        
        #region Parameter MaxHPOParallelTrainingJob
        /// <summary>
        /// <para>
        /// <para>Maximum number of parallel training jobs to start for the hyperparameter tuning job.
        /// The default is 2. The number of parallel jobs you can run is limited by the available
        /// resources on your training instance.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("MaxHPOParallelTrainingJobs")]
        public System.Int32? MaxHPOParallelTrainingJob { get; set; }
        #endregion
        
        #region Parameter NeptuneIamRoleArn
        /// <summary>
        /// <para>
        /// <para>The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources.
        /// This must be listed in your DB cluster parameter group or an error will occur.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String NeptuneIamRoleArn { get; set; }
        #endregion
        
        #region Parameter PreviousModelTrainingJobId
        /// <summary>
        /// <para>
        /// <para>The job ID of a completed model-training job that you want to update incrementally
        /// based on updated data.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String PreviousModelTrainingJobId { get; set; }
        #endregion
        
        #region Parameter S3OutputEncryptionKMSKey
        /// <summary>
        /// <para>
        /// <para>The Amazon Key Management Service (KMS) key that SageMaker uses to encrypt the output
        /// of the processing job. The default is none.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String S3OutputEncryptionKMSKey { get; set; }
        #endregion
        
        #region Parameter SagemakerIamRoleArn
        /// <summary>
        /// <para>
        /// <para>The ARN of an IAM role for SageMaker execution.This must be listed in your DB cluster
        /// parameter group or an error will occur.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String SagemakerIamRoleArn { get; set; }
        #endregion
        
        #region Parameter SecurityGroupId
        /// <summary>
        /// <para>
        /// <para>The VPC security group IDs. The default is None.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("SecurityGroupIds")]
        public System.String[] SecurityGroupId { get; set; }
        #endregion
        
        #region Parameter CustomModelTrainingParameters_SourceS3DirectoryPath
        /// <summary>
        /// <para>
        /// <para>The path to the Amazon S3 location where the Python module implementing your model
        /// is located. This must point to a valid existing Amazon S3 location that contains,
        /// at a minimum, a training script, a transform script, and a <c>model-hpo-configuration.json</c>
        /// file.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String CustomModelTrainingParameters_SourceS3DirectoryPath { get; set; }
        #endregion
        
        #region Parameter Subnet
        /// <summary>
        /// <para>
        /// <para>The IDs of the subnets in the Neptune VPC. The default is None.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("Subnets")]
        public System.String[] Subnet { get; set; }
        #endregion
        
        #region Parameter CustomModelTrainingParameters_TrainingEntryPointScript
        /// <summary>
        /// <para>
        /// <para>The name of the entry point in your module of a script that performs model training
        /// and takes hyperparameters as command-line arguments, including fixed hyperparameters.
        /// The default is <c>training.py</c>.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String CustomModelTrainingParameters_TrainingEntryPointScript { get; set; }
        #endregion
        
        #region Parameter TrainingInstanceType
        /// <summary>
        /// <para>
        /// <para>The type of ML instance used for model training. All Neptune ML models support CPU,
        /// GPU, and multiGPU training. The default is <c>ml.p3.2xlarge</c>. Choosing the right
        /// instance type for training depends on the task type, graph size, and your budget.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String TrainingInstanceType { get; set; }
        #endregion
        
        #region Parameter TrainingInstanceVolumeSizeInGB
        /// <summary>
        /// <para>
        /// <para>The disk volume size of the training instance. Both input data and the output model
        /// are stored on disk, so the volume size must be large enough to hold both data sets.
        /// The default is 0. If not specified or 0, Neptune ML selects a disk volume size based
        /// on the recommendation generated in the data processing step.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.Int32? TrainingInstanceVolumeSizeInGB { get; set; }
        #endregion
        
        #region Parameter TrainingTimeOutInSecond
        /// <summary>
        /// <para>
        /// <para>Timeout in seconds for the training job. The default is 86,400 (1 day).</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("TrainingTimeOutInSeconds")]
        public System.Int32? TrainingTimeOutInSecond { get; set; }
        #endregion
        
        #region Parameter TrainModelS3Location
        /// <summary>
        /// <para>
        /// <para>The location in Amazon S3 where the model artifacts are to be stored.</para>
        /// </para>
        /// </summary>
        #if !MODULAR
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        #else
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true, Mandatory = true)]
        [System.Management.Automation.AllowEmptyString]
        [System.Management.Automation.AllowNull]
        #endif
        [Amazon.PowerShell.Common.AWSRequiredParameter]
        public System.String TrainModelS3Location { get; set; }
        #endregion
        
        #region Parameter CustomModelTrainingParameters_TransformEntryPointScript
        /// <summary>
        /// <para>
        /// <para>The name of the entry point in your module of a script that should be run after the
        /// best model from the hyperparameter search has been identified, to compute the model
        /// artifacts necessary for model deployment. It should be able to run with no command-line
        /// arguments.The default is <c>transform.py</c>.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String CustomModelTrainingParameters_TransformEntryPointScript { get; set; }
        #endregion
        
        #region Parameter VolumeEncryptionKMSKey
        /// <summary>
        /// <para>
        /// <para>The Amazon Key Management Service (KMS) key that SageMaker uses to encrypt data on
        /// the storage volume attached to the ML compute instances that run the training job.
        /// The default is None.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String VolumeEncryptionKMSKey { get; set; }
        #endregion
        
        #region Parameter Select
        /// <summary>
        /// Use the -Select parameter to control the cmdlet output. The default value is '*'.
        /// Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Neptunedata.Model.StartMLModelTrainingJobResponse).
        /// Specifying the name of a property of type Amazon.Neptunedata.Model.StartMLModelTrainingJobResponse will result in that property being returned.
        /// Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public string Select { get; set; } = "*";
        #endregion
        
        #region Parameter Force
        /// <summary>
        /// This parameter overrides confirmation prompts to force 
        /// the cmdlet to continue its operation. This parameter should always
        /// be used with caution.
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public SwitchParameter Force { get; set; }
        #endregion
        
        protected override void ProcessRecord()
        {
            this._AWSSignerType = "v4";
            base.ProcessRecord();
            
            var resourceIdentifiersText = FormatParameterValuesForConfirmationMsg(nameof(this.Id), MyInvocation.BoundParameters);
            if (!ConfirmShouldProceed(this.Force.IsPresent, resourceIdentifiersText, "Start-NEPTMLModelTrainingJob (StartMLModelTrainingJob)"))
            {
                return;
            }
            
            var context = new CmdletContext();
            
            // allow for manipulation of parameters prior to loading into context
            PreExecutionContextLoad(context);
            
            if (ParameterWasBound(nameof(this.Select)))
            {
                context.Select = CreateSelectDelegate<Amazon.Neptunedata.Model.StartMLModelTrainingJobResponse, StartNEPTMLModelTrainingJobCmdlet>(Select) ??
                    throw new System.ArgumentException("Invalid value for -Select parameter.", nameof(this.Select));
            }
            context.BaseProcessingInstanceType = this.BaseProcessingInstanceType;
            context.CustomModelTrainingParameters_SourceS3DirectoryPath = this.CustomModelTrainingParameters_SourceS3DirectoryPath;
            context.CustomModelTrainingParameters_TrainingEntryPointScript = this.CustomModelTrainingParameters_TrainingEntryPointScript;
            context.CustomModelTrainingParameters_TransformEntryPointScript = this.CustomModelTrainingParameters_TransformEntryPointScript;
            context.DataProcessingJobId = this.DataProcessingJobId;
            #if MODULAR
            if (this.DataProcessingJobId == null && ParameterWasBound(nameof(this.DataProcessingJobId)))
            {
                WriteWarning("You are passing $null as a value for parameter DataProcessingJobId which is marked as required. In case you believe this parameter was incorrectly marked as required, report this by opening an issue at https://github.com/aws/aws-tools-for-powershell/issues.");
            }
            #endif
            context.EnableManagedSpotTraining = this.EnableManagedSpotTraining;
            context.Id = this.Id;
            context.MaxHPONumberOfTrainingJob = this.MaxHPONumberOfTrainingJob;
            context.MaxHPOParallelTrainingJob = this.MaxHPOParallelTrainingJob;
            context.NeptuneIamRoleArn = this.NeptuneIamRoleArn;
            context.PreviousModelTrainingJobId = this.PreviousModelTrainingJobId;
            context.S3OutputEncryptionKMSKey = this.S3OutputEncryptionKMSKey;
            context.SagemakerIamRoleArn = this.SagemakerIamRoleArn;
            if (this.SecurityGroupId != null)
            {
                context.SecurityGroupId = new List<System.String>(this.SecurityGroupId);
            }
            if (this.Subnet != null)
            {
                context.Subnet = new List<System.String>(this.Subnet);
            }
            context.TrainingInstanceType = this.TrainingInstanceType;
            context.TrainingInstanceVolumeSizeInGB = this.TrainingInstanceVolumeSizeInGB;
            context.TrainingTimeOutInSecond = this.TrainingTimeOutInSecond;
            context.TrainModelS3Location = this.TrainModelS3Location;
            #if MODULAR
            if (this.TrainModelS3Location == null && ParameterWasBound(nameof(this.TrainModelS3Location)))
            {
                WriteWarning("You are passing $null as a value for parameter TrainModelS3Location which is marked as required. In case you believe this parameter was incorrectly marked as required, report this by opening an issue at https://github.com/aws/aws-tools-for-powershell/issues.");
            }
            #endif
            context.VolumeEncryptionKMSKey = this.VolumeEncryptionKMSKey;
            
            // allow further manipulation of loaded context prior to processing
            PostExecutionContextLoad(context);
            
            var output = Execute(context) as CmdletOutput;
            ProcessOutput(output);
        }
        
        #region IExecutor Members
        
        public object Execute(ExecutorContext context)
        {
            var cmdletContext = context as CmdletContext;
            // create request
            var request = new Amazon.Neptunedata.Model.StartMLModelTrainingJobRequest();
            
            if (cmdletContext.BaseProcessingInstanceType != null)
            {
                request.BaseProcessingInstanceType = cmdletContext.BaseProcessingInstanceType;
            }
            
             // populate CustomModelTrainingParameters
            var requestCustomModelTrainingParametersIsNull = true;
            request.CustomModelTrainingParameters = new Amazon.Neptunedata.Model.CustomModelTrainingParameters();
            System.String requestCustomModelTrainingParameters_customModelTrainingParameters_SourceS3DirectoryPath = null;
            if (cmdletContext.CustomModelTrainingParameters_SourceS3DirectoryPath != null)
            {
                requestCustomModelTrainingParameters_customModelTrainingParameters_SourceS3DirectoryPath = cmdletContext.CustomModelTrainingParameters_SourceS3DirectoryPath;
            }
            if (requestCustomModelTrainingParameters_customModelTrainingParameters_SourceS3DirectoryPath != null)
            {
                request.CustomModelTrainingParameters.SourceS3DirectoryPath = requestCustomModelTrainingParameters_customModelTrainingParameters_SourceS3DirectoryPath;
                requestCustomModelTrainingParametersIsNull = false;
            }
            System.String requestCustomModelTrainingParameters_customModelTrainingParameters_TrainingEntryPointScript = null;
            if (cmdletContext.CustomModelTrainingParameters_TrainingEntryPointScript != null)
            {
                requestCustomModelTrainingParameters_customModelTrainingParameters_TrainingEntryPointScript = cmdletContext.CustomModelTrainingParameters_TrainingEntryPointScript;
            }
            if (requestCustomModelTrainingParameters_customModelTrainingParameters_TrainingEntryPointScript != null)
            {
                request.CustomModelTrainingParameters.TrainingEntryPointScript = requestCustomModelTrainingParameters_customModelTrainingParameters_TrainingEntryPointScript;
                requestCustomModelTrainingParametersIsNull = false;
            }
            System.String requestCustomModelTrainingParameters_customModelTrainingParameters_TransformEntryPointScript = null;
            if (cmdletContext.CustomModelTrainingParameters_TransformEntryPointScript != null)
            {
                requestCustomModelTrainingParameters_customModelTrainingParameters_TransformEntryPointScript = cmdletContext.CustomModelTrainingParameters_TransformEntryPointScript;
            }
            if (requestCustomModelTrainingParameters_customModelTrainingParameters_TransformEntryPointScript != null)
            {
                request.CustomModelTrainingParameters.TransformEntryPointScript = requestCustomModelTrainingParameters_customModelTrainingParameters_TransformEntryPointScript;
                requestCustomModelTrainingParametersIsNull = false;
            }
             // determine if request.CustomModelTrainingParameters should be set to null
            if (requestCustomModelTrainingParametersIsNull)
            {
                request.CustomModelTrainingParameters = null;
            }
            if (cmdletContext.DataProcessingJobId != null)
            {
                request.DataProcessingJobId = cmdletContext.DataProcessingJobId;
            }
            if (cmdletContext.EnableManagedSpotTraining != null)
            {
                request.EnableManagedSpotTraining = cmdletContext.EnableManagedSpotTraining.Value;
            }
            if (cmdletContext.Id != null)
            {
                request.Id = cmdletContext.Id;
            }
            if (cmdletContext.MaxHPONumberOfTrainingJob != null)
            {
                request.MaxHPONumberOfTrainingJobs = cmdletContext.MaxHPONumberOfTrainingJob.Value;
            }
            if (cmdletContext.MaxHPOParallelTrainingJob != null)
            {
                request.MaxHPOParallelTrainingJobs = cmdletContext.MaxHPOParallelTrainingJob.Value;
            }
            if (cmdletContext.NeptuneIamRoleArn != null)
            {
                request.NeptuneIamRoleArn = cmdletContext.NeptuneIamRoleArn;
            }
            if (cmdletContext.PreviousModelTrainingJobId != null)
            {
                request.PreviousModelTrainingJobId = cmdletContext.PreviousModelTrainingJobId;
            }
            if (cmdletContext.S3OutputEncryptionKMSKey != null)
            {
                request.S3OutputEncryptionKMSKey = cmdletContext.S3OutputEncryptionKMSKey;
            }
            if (cmdletContext.SagemakerIamRoleArn != null)
            {
                request.SagemakerIamRoleArn = cmdletContext.SagemakerIamRoleArn;
            }
            if (cmdletContext.SecurityGroupId != null)
            {
                request.SecurityGroupIds = cmdletContext.SecurityGroupId;
            }
            if (cmdletContext.Subnet != null)
            {
                request.Subnets = cmdletContext.Subnet;
            }
            if (cmdletContext.TrainingInstanceType != null)
            {
                request.TrainingInstanceType = cmdletContext.TrainingInstanceType;
            }
            if (cmdletContext.TrainingInstanceVolumeSizeInGB != null)
            {
                request.TrainingInstanceVolumeSizeInGB = cmdletContext.TrainingInstanceVolumeSizeInGB.Value;
            }
            if (cmdletContext.TrainingTimeOutInSecond != null)
            {
                request.TrainingTimeOutInSeconds = cmdletContext.TrainingTimeOutInSecond.Value;
            }
            if (cmdletContext.TrainModelS3Location != null)
            {
                request.TrainModelS3Location = cmdletContext.TrainModelS3Location;
            }
            if (cmdletContext.VolumeEncryptionKMSKey != null)
            {
                request.VolumeEncryptionKMSKey = cmdletContext.VolumeEncryptionKMSKey;
            }
            
            CmdletOutput output;
            
            // issue call
            var client = Client ?? CreateClient(_CurrentCredentials, _RegionEndpoint);
            try
            {
                var response = CallAWSServiceOperation(client, request);
                object pipelineOutput = null;
                pipelineOutput = cmdletContext.Select(response, this);
                output = new CmdletOutput
                {
                    PipelineOutput = pipelineOutput,
                    ServiceResponse = response
                };
            }
            catch (Exception e)
            {
                output = new CmdletOutput { ErrorResponse = e };
            }
            
            return output;
        }
        
        public ExecutorContext CreateContext()
        {
            return new CmdletContext();
        }
        
        #endregion
        
        #region AWS Service Operation Call
        
        private Amazon.Neptunedata.Model.StartMLModelTrainingJobResponse CallAWSServiceOperation(IAmazonNeptunedata client, Amazon.Neptunedata.Model.StartMLModelTrainingJobRequest request)
        {
            Utils.Common.WriteVerboseEndpointMessage(this, client.Config, "Amazon NeptuneData", "StartMLModelTrainingJob");
            try
            {
                #if DESKTOP
                return client.StartMLModelTrainingJob(request);
                #elif CORECLR
                return client.StartMLModelTrainingJobAsync(request).GetAwaiter().GetResult();
                #else
                        #error "Unknown build edition"
                #endif
            }
            catch (AmazonServiceException exc)
            {
                var webException = exc.InnerException as System.Net.WebException;
                if (webException != null)
                {
                    throw new Exception(Utils.Common.FormatNameResolutionFailureMessage(client.Config, webException.Message), webException);
                }
                throw;
            }
        }
        
        #endregion
        
        internal partial class CmdletContext : ExecutorContext
        {
            public System.String BaseProcessingInstanceType { get; set; }
            public System.String CustomModelTrainingParameters_SourceS3DirectoryPath { get; set; }
            public System.String CustomModelTrainingParameters_TrainingEntryPointScript { get; set; }
            public System.String CustomModelTrainingParameters_TransformEntryPointScript { get; set; }
            public System.String DataProcessingJobId { get; set; }
            public System.Boolean? EnableManagedSpotTraining { get; set; }
            public System.String Id { get; set; }
            public System.Int32? MaxHPONumberOfTrainingJob { get; set; }
            public System.Int32? MaxHPOParallelTrainingJob { get; set; }
            public System.String NeptuneIamRoleArn { get; set; }
            public System.String PreviousModelTrainingJobId { get; set; }
            public System.String S3OutputEncryptionKMSKey { get; set; }
            public System.String SagemakerIamRoleArn { get; set; }
            public List<System.String> SecurityGroupId { get; set; }
            public List<System.String> Subnet { get; set; }
            public System.String TrainingInstanceType { get; set; }
            public System.Int32? TrainingInstanceVolumeSizeInGB { get; set; }
            public System.Int32? TrainingTimeOutInSecond { get; set; }
            public System.String TrainModelS3Location { get; set; }
            public System.String VolumeEncryptionKMSKey { get; set; }
            public System.Func<Amazon.Neptunedata.Model.StartMLModelTrainingJobResponse, StartNEPTMLModelTrainingJobCmdlet, object> Select { get; set; } =
                (response, cmdlet) => response;
        }
        
    }
}
