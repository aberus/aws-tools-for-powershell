/*******************************************************************************
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *  this file except in compliance with the License. A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 *  or in the "license" file accompanying this file.
 *  This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *  CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 * *****************************************************************************
 *
 *  AWS Tools for Windows (TM) PowerShell (TM)
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using Amazon.PowerShell.Common;
using Amazon.Runtime;
using Amazon.Neptunedata;
using Amazon.Neptunedata.Model;

namespace Amazon.PowerShell.Cmdlets.NEPT
{
    /// <summary>
    /// Creates a new Neptune ML data processing job for processing the graph data exported
    /// from Neptune for training. See <a href="https://docs.aws.amazon.com/neptune/latest/userguide/machine-learning-api-dataprocessing.html">The
    /// <c>dataprocessing</c> command</a>.
    /// 
    ///  
    /// <para>
    /// When invoking this operation in a Neptune cluster that has IAM authentication enabled,
    /// the IAM user or role making the request must have a policy attached that allows the
    /// <a href="https://docs.aws.amazon.com/neptune/latest/userguide/iam-dp-actions.html#startmlmodeldataprocessingjob">neptune-db:StartMLModelDataProcessingJob</a>
    /// IAM action in that cluster.
    /// </para>
    /// </summary>
    [Cmdlet("Start", "NEPTMLDataProcessingJob", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium)]
    [OutputType("Amazon.Neptunedata.Model.StartMLDataProcessingJobResponse")]
    [AWSCmdlet("Calls the Amazon NeptuneData StartMLDataProcessingJob API operation.", Operation = new[] {"StartMLDataProcessingJob"}, SelectReturnType = typeof(Amazon.Neptunedata.Model.StartMLDataProcessingJobResponse))]
    [AWSCmdletOutput("Amazon.Neptunedata.Model.StartMLDataProcessingJobResponse",
        "This cmdlet returns an Amazon.Neptunedata.Model.StartMLDataProcessingJobResponse object containing multiple properties."
    )]
    public partial class StartNEPTMLDataProcessingJobCmdlet : AmazonNeptunedataClientCmdlet, IExecutor
    {
        
        protected override bool IsGeneratedCmdlet { get; set; } = true;
        
        #region Parameter ConfigFileName
        /// <summary>
        /// <para>
        /// <para>A data specification file that describes how to load the exported graph data for training.
        /// The file is automatically generated by the Neptune export toolkit. The default is
        /// <c>training-data-configuration.json</c>.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String ConfigFileName { get; set; }
        #endregion
        
        #region Parameter Id
        /// <summary>
        /// <para>
        /// <para>A unique identifier for the new job. The default is an autogenerated UUID.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(Position = 0, ValueFromPipelineByPropertyName = true, ValueFromPipeline = true)]
        public System.String Id { get; set; }
        #endregion
        
        #region Parameter InputDataS3Location
        /// <summary>
        /// <para>
        /// <para>The URI of the Amazon S3 location where you want SageMaker to download the data needed
        /// to run the data processing job.</para>
        /// </para>
        /// </summary>
        #if !MODULAR
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        #else
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true, Mandatory = true)]
        [System.Management.Automation.AllowEmptyString]
        [System.Management.Automation.AllowNull]
        #endif
        [Amazon.PowerShell.Common.AWSRequiredParameter]
        public System.String InputDataS3Location { get; set; }
        #endregion
        
        #region Parameter ModelType
        /// <summary>
        /// <para>
        /// <para>One of the two model types that Neptune ML currently supports: heterogeneous graph
        /// models (<c>heterogeneous</c>), and knowledge graph (<c>kge</c>). The default is none.
        /// If not specified, Neptune ML chooses the model type automatically based on the data.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String ModelType { get; set; }
        #endregion
        
        #region Parameter NeptuneIamRoleArn
        /// <summary>
        /// <para>
        /// <para>The Amazon Resource Name (ARN) of an IAM role that SageMaker can assume to perform
        /// tasks on your behalf. This must be listed in your DB cluster parameter group or an
        /// error will occur.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String NeptuneIamRoleArn { get; set; }
        #endregion
        
        #region Parameter PreviousDataProcessingJobId
        /// <summary>
        /// <para>
        /// <para>The job ID of a completed data processing job run on an earlier version of the data.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String PreviousDataProcessingJobId { get; set; }
        #endregion
        
        #region Parameter ProcessedDataS3Location
        /// <summary>
        /// <para>
        /// <para>The URI of the Amazon S3 location where you want SageMaker to save the results of
        /// a data processing job.</para>
        /// </para>
        /// </summary>
        #if !MODULAR
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        #else
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true, Mandatory = true)]
        [System.Management.Automation.AllowEmptyString]
        [System.Management.Automation.AllowNull]
        #endif
        [Amazon.PowerShell.Common.AWSRequiredParameter]
        public System.String ProcessedDataS3Location { get; set; }
        #endregion
        
        #region Parameter ProcessingInstanceType
        /// <summary>
        /// <para>
        /// <para>The type of ML instance used during data processing. Its memory should be large enough
        /// to hold the processed dataset. The default is the smallest ml.r5 type whose memory
        /// is ten times larger than the size of the exported graph data on disk.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String ProcessingInstanceType { get; set; }
        #endregion
        
        #region Parameter ProcessingInstanceVolumeSizeInGB
        /// <summary>
        /// <para>
        /// <para>The disk volume size of the processing instance. Both input data and processed data
        /// are stored on disk, so the volume size must be large enough to hold both data sets.
        /// The default is 0. If not specified or 0, Neptune ML chooses the volume size automatically
        /// based on the data size.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.Int32? ProcessingInstanceVolumeSizeInGB { get; set; }
        #endregion
        
        #region Parameter ProcessingTimeOutInSecond
        /// <summary>
        /// <para>
        /// <para>Timeout in seconds for the data processing job. The default is 86,400 (1 day).</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("ProcessingTimeOutInSeconds")]
        public System.Int32? ProcessingTimeOutInSecond { get; set; }
        #endregion
        
        #region Parameter S3OutputEncryptionKMSKey
        /// <summary>
        /// <para>
        /// <para>The Amazon Key Management Service (Amazon KMS) key that SageMaker uses to encrypt
        /// the output of the processing job. The default is none.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String S3OutputEncryptionKMSKey { get; set; }
        #endregion
        
        #region Parameter SagemakerIamRoleArn
        /// <summary>
        /// <para>
        /// <para>The ARN of an IAM role for SageMaker execution. This must be listed in your DB cluster
        /// parameter group or an error will occur.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String SagemakerIamRoleArn { get; set; }
        #endregion
        
        #region Parameter SecurityGroupId
        /// <summary>
        /// <para>
        /// <para>The VPC security group IDs. The default is None.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("SecurityGroupIds")]
        public System.String[] SecurityGroupId { get; set; }
        #endregion
        
        #region Parameter Subnet
        /// <summary>
        /// <para>
        /// <para>The IDs of the subnets in the Neptune VPC. The default is None.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("Subnets")]
        public System.String[] Subnet { get; set; }
        #endregion
        
        #region Parameter VolumeEncryptionKMSKey
        /// <summary>
        /// <para>
        /// <para>The Amazon Key Management Service (Amazon KMS) key that SageMaker uses to encrypt
        /// data on the storage volume attached to the ML compute instances that run the training
        /// job. The default is None.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String VolumeEncryptionKMSKey { get; set; }
        #endregion
        
        #region Parameter Select
        /// <summary>
        /// Use the -Select parameter to control the cmdlet output. The default value is '*'.
        /// Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.Neptunedata.Model.StartMLDataProcessingJobResponse).
        /// Specifying the name of a property of type Amazon.Neptunedata.Model.StartMLDataProcessingJobResponse will result in that property being returned.
        /// Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public string Select { get; set; } = "*";
        #endregion
        
        #region Parameter Force
        /// <summary>
        /// This parameter overrides confirmation prompts to force 
        /// the cmdlet to continue its operation. This parameter should always
        /// be used with caution.
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public SwitchParameter Force { get; set; }
        #endregion
        
        protected override void ProcessRecord()
        {
            this._AWSSignerType = "v4";
            base.ProcessRecord();
            
            var resourceIdentifiersText = FormatParameterValuesForConfirmationMsg(nameof(this.Id), MyInvocation.BoundParameters);
            if (!ConfirmShouldProceed(this.Force.IsPresent, resourceIdentifiersText, "Start-NEPTMLDataProcessingJob (StartMLDataProcessingJob)"))
            {
                return;
            }
            
            var context = new CmdletContext();
            
            // allow for manipulation of parameters prior to loading into context
            PreExecutionContextLoad(context);
            
            if (ParameterWasBound(nameof(this.Select)))
            {
                context.Select = CreateSelectDelegate<Amazon.Neptunedata.Model.StartMLDataProcessingJobResponse, StartNEPTMLDataProcessingJobCmdlet>(Select) ??
                    throw new System.ArgumentException("Invalid value for -Select parameter.", nameof(this.Select));
            }
            context.ConfigFileName = this.ConfigFileName;
            context.Id = this.Id;
            context.InputDataS3Location = this.InputDataS3Location;
            #if MODULAR
            if (this.InputDataS3Location == null && ParameterWasBound(nameof(this.InputDataS3Location)))
            {
                WriteWarning("You are passing $null as a value for parameter InputDataS3Location which is marked as required. In case you believe this parameter was incorrectly marked as required, report this by opening an issue at https://github.com/aws/aws-tools-for-powershell/issues.");
            }
            #endif
            context.ModelType = this.ModelType;
            context.NeptuneIamRoleArn = this.NeptuneIamRoleArn;
            context.PreviousDataProcessingJobId = this.PreviousDataProcessingJobId;
            context.ProcessedDataS3Location = this.ProcessedDataS3Location;
            #if MODULAR
            if (this.ProcessedDataS3Location == null && ParameterWasBound(nameof(this.ProcessedDataS3Location)))
            {
                WriteWarning("You are passing $null as a value for parameter ProcessedDataS3Location which is marked as required. In case you believe this parameter was incorrectly marked as required, report this by opening an issue at https://github.com/aws/aws-tools-for-powershell/issues.");
            }
            #endif
            context.ProcessingInstanceType = this.ProcessingInstanceType;
            context.ProcessingInstanceVolumeSizeInGB = this.ProcessingInstanceVolumeSizeInGB;
            context.ProcessingTimeOutInSecond = this.ProcessingTimeOutInSecond;
            context.S3OutputEncryptionKMSKey = this.S3OutputEncryptionKMSKey;
            context.SagemakerIamRoleArn = this.SagemakerIamRoleArn;
            if (this.SecurityGroupId != null)
            {
                context.SecurityGroupId = new List<System.String>(this.SecurityGroupId);
            }
            if (this.Subnet != null)
            {
                context.Subnet = new List<System.String>(this.Subnet);
            }
            context.VolumeEncryptionKMSKey = this.VolumeEncryptionKMSKey;
            
            // allow further manipulation of loaded context prior to processing
            PostExecutionContextLoad(context);
            
            var output = Execute(context) as CmdletOutput;
            ProcessOutput(output);
        }
        
        #region IExecutor Members
        
        public object Execute(ExecutorContext context)
        {
            var cmdletContext = context as CmdletContext;
            // create request
            var request = new Amazon.Neptunedata.Model.StartMLDataProcessingJobRequest();
            
            if (cmdletContext.ConfigFileName != null)
            {
                request.ConfigFileName = cmdletContext.ConfigFileName;
            }
            if (cmdletContext.Id != null)
            {
                request.Id = cmdletContext.Id;
            }
            if (cmdletContext.InputDataS3Location != null)
            {
                request.InputDataS3Location = cmdletContext.InputDataS3Location;
            }
            if (cmdletContext.ModelType != null)
            {
                request.ModelType = cmdletContext.ModelType;
            }
            if (cmdletContext.NeptuneIamRoleArn != null)
            {
                request.NeptuneIamRoleArn = cmdletContext.NeptuneIamRoleArn;
            }
            if (cmdletContext.PreviousDataProcessingJobId != null)
            {
                request.PreviousDataProcessingJobId = cmdletContext.PreviousDataProcessingJobId;
            }
            if (cmdletContext.ProcessedDataS3Location != null)
            {
                request.ProcessedDataS3Location = cmdletContext.ProcessedDataS3Location;
            }
            if (cmdletContext.ProcessingInstanceType != null)
            {
                request.ProcessingInstanceType = cmdletContext.ProcessingInstanceType;
            }
            if (cmdletContext.ProcessingInstanceVolumeSizeInGB != null)
            {
                request.ProcessingInstanceVolumeSizeInGB = cmdletContext.ProcessingInstanceVolumeSizeInGB.Value;
            }
            if (cmdletContext.ProcessingTimeOutInSecond != null)
            {
                request.ProcessingTimeOutInSeconds = cmdletContext.ProcessingTimeOutInSecond.Value;
            }
            if (cmdletContext.S3OutputEncryptionKMSKey != null)
            {
                request.S3OutputEncryptionKMSKey = cmdletContext.S3OutputEncryptionKMSKey;
            }
            if (cmdletContext.SagemakerIamRoleArn != null)
            {
                request.SagemakerIamRoleArn = cmdletContext.SagemakerIamRoleArn;
            }
            if (cmdletContext.SecurityGroupId != null)
            {
                request.SecurityGroupIds = cmdletContext.SecurityGroupId;
            }
            if (cmdletContext.Subnet != null)
            {
                request.Subnets = cmdletContext.Subnet;
            }
            if (cmdletContext.VolumeEncryptionKMSKey != null)
            {
                request.VolumeEncryptionKMSKey = cmdletContext.VolumeEncryptionKMSKey;
            }
            
            CmdletOutput output;
            
            // issue call
            var client = Client ?? CreateClient(_CurrentCredentials, _RegionEndpoint);
            try
            {
                var response = CallAWSServiceOperation(client, request);
                object pipelineOutput = null;
                pipelineOutput = cmdletContext.Select(response, this);
                output = new CmdletOutput
                {
                    PipelineOutput = pipelineOutput,
                    ServiceResponse = response
                };
            }
            catch (Exception e)
            {
                output = new CmdletOutput { ErrorResponse = e };
            }
            
            return output;
        }
        
        public ExecutorContext CreateContext()
        {
            return new CmdletContext();
        }
        
        #endregion
        
        #region AWS Service Operation Call
        
        private Amazon.Neptunedata.Model.StartMLDataProcessingJobResponse CallAWSServiceOperation(IAmazonNeptunedata client, Amazon.Neptunedata.Model.StartMLDataProcessingJobRequest request)
        {
            Utils.Common.WriteVerboseEndpointMessage(this, client.Config, "Amazon NeptuneData", "StartMLDataProcessingJob");
            try
            {
                #if DESKTOP
                return client.StartMLDataProcessingJob(request);
                #elif CORECLR
                return client.StartMLDataProcessingJobAsync(request).GetAwaiter().GetResult();
                #else
                        #error "Unknown build edition"
                #endif
            }
            catch (AmazonServiceException exc)
            {
                var webException = exc.InnerException as System.Net.WebException;
                if (webException != null)
                {
                    throw new Exception(Utils.Common.FormatNameResolutionFailureMessage(client.Config, webException.Message), webException);
                }
                throw;
            }
        }
        
        #endregion
        
        internal partial class CmdletContext : ExecutorContext
        {
            public System.String ConfigFileName { get; set; }
            public System.String Id { get; set; }
            public System.String InputDataS3Location { get; set; }
            public System.String ModelType { get; set; }
            public System.String NeptuneIamRoleArn { get; set; }
            public System.String PreviousDataProcessingJobId { get; set; }
            public System.String ProcessedDataS3Location { get; set; }
            public System.String ProcessingInstanceType { get; set; }
            public System.Int32? ProcessingInstanceVolumeSizeInGB { get; set; }
            public System.Int32? ProcessingTimeOutInSecond { get; set; }
            public System.String S3OutputEncryptionKMSKey { get; set; }
            public System.String SagemakerIamRoleArn { get; set; }
            public List<System.String> SecurityGroupId { get; set; }
            public List<System.String> Subnet { get; set; }
            public System.String VolumeEncryptionKMSKey { get; set; }
            public System.Func<Amazon.Neptunedata.Model.StartMLDataProcessingJobResponse, StartNEPTMLDataProcessingJobCmdlet, object> Select { get; set; } =
                (response, cmdlet) => response;
        }
        
    }
}
